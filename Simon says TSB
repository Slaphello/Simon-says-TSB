local mapIDs = {
    [10449761463] = true,    -- First map ID
    [130818724007978] = true -- Second map ID
}

if mapIDs[game.PlaceId] then
    -- Services
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local CoreGui = game:GetService("CoreGui")

    -- Local variables
    local player = Players.LocalPlayer
    local isEnabled, hasSpoken = false, false
    local lastMessageTime, messageCooldown = 0, 3
    local detectionRadiusSquared = 100
    local lastToggleTime, connection

    -- Target animations hash table
    local TARGET_ANIMATION_IDS = {
        ["rbxassetid://12351854556"] = true,
        ["rbxassetid://15311685628"] = true,
        ["rbxassetid://78521642007560"] = true
    }

    -- GUI for toggling
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "AnimationCheckGUI"
    ScreenGui.Parent = CoreGui

    local mainFrame = Instance.new("Frame", ScreenGui)
    mainFrame.Size = UDim2.new(0, 120, 0, 30)
    mainFrame.Position = UDim2.new(0, 50, 0, 50)
    mainFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    mainFrame.BackgroundTransparency = 0.6
    mainFrame.BorderSizePixel = 1

    local toggleButton = Instance.new("TextButton", mainFrame)
    toggleButton.Size = UDim2.new(1, -6, 1, -6)
    toggleButton.Position = UDim2.new(0, 3, 0, 3)
    toggleButton.Text = "Enable"
    toggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    toggleButton.TextColor3 = Color3.new(1, 1, 1)
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.TextSize = 11
    toggleButton.BackgroundTransparency = 0.6

    -- Function to check nearby players for target animations
    local function checkForAnimation()
        if not isEnabled then return false end

        local character = player.Character
        if not character then return false end
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if not hrp then return false end
        local playerPosition = hrp.Position

        for _, otherPlayer in ipairs(Players:GetPlayers()) do
            if otherPlayer ~= player then
                local otherCharacter = otherPlayer.Character
                if otherCharacter then
                    local otherHRP = otherCharacter:FindFirstChild("HumanoidRootPart")
                    local otherHumanoid = otherCharacter:FindFirstChild("Humanoid")
                    if otherHRP and otherHumanoid then
                        local distanceSquared = (otherHRP.Position - playerPosition).Magnitude^2
                        if distanceSquared <= detectionRadiusSquared then
                            for _, track in ipairs(otherHumanoid:GetPlayingAnimationTracks()) do
                                if track.Animation and TARGET_ANIMATION_IDS[track.Animation.AnimationId] then
                                    return true
                                end
                            end
                        end
                    end
                end
            end
        end
        return false
    end

    -- Send a message with a cooldown
    local function sendMessage()
        if os.clock() - lastMessageTime > messageCooldown then
            task.defer(function()
                ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Simon says counter", "All")
            end)
            lastMessageTime = os.clock()
            hasSpoken = true
        end
    end

    -- Start checking nearby players' animations
    local function startChecking()
        if connection then connection:Disconnect() end
        connection = RunService.Heartbeat:Connect(function()
            if isEnabled and checkForAnimation() then
                if not hasSpoken then
                    sendMessage()
                end
            else
                hasSpoken = false
            end
        end)
    end

    -- Toggle the animation check on/off
    local function toggleScript()
        local currentTime = os.clock()
        if currentTime - lastToggleTime < 0.5 then return end
        lastToggleTime = currentTime

        isEnabled = not isEnabled
        toggleButton.Text = isEnabled and "Animation Check: ON" or "Animation Check: OFF"
        toggleButton.BackgroundColor3 = isEnabled and Color3.fromRGB(0, 200, 0) or Color3.fromRGB(200, 0, 0)

        if isEnabled then
            startChecking()
        else
            if connection then connection:Disconnect() end
        end
    end

    -- Connect button click event to toggle
    toggleButton.MouseButton1Click:Connect(toggleScript)

    -- Cleanup when the player's character changes
    local function cleanUp()
        isEnabled, hasSpoken, lastMessageTime = false, false, 0
        toggleButton.Text = "Enable Animation Check"
        toggleButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
        if connection then connection:Disconnect() end
    end

    player.CharacterAdded:Connect(cleanUp)
end
